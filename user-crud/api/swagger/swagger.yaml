swagger: "2.0"
info:
   version: 1.0
   title: User API
   desription: This is Swagger Documentation for the API

host: localhost:8082


schemes: [https,http]

#Return Users From get request
paths:
  # /string:
  #   get:
  #     summary: Returns a string.
  #     description: String Checkup
  #     responses:
  #       200:    # status code
  #         description: Successul Response
  #         schema: 
  #           type: string
  #           example: "Users String"
  #       400:
  #         description: User Error
  #         schema: 
  #           type: string
  #           example: "Some Error "

#   #Returns a User
#   /read-all:
#     get:
#       summary: Returns a list of users.
#       description: People Who are already registered
#       responses:
#         200:    # status code
#           description: Successul Response
#           schema: 
#             type: object
#             properties:
#              id:
#                type: integer
#               username:
#                 type: string
#               first_name:
#                 type: string
#               last_name: 
#                 type: string
#               email:
#                 type: string
#               phone:
#                 type:integer
#               password:
#                 type:string
#               tokens:
#                 token:
#                  type:string
#               role:
#                 type:string

#Returns an array of Users
  /read-all:
    get:
      summary: Returns a list of users.
      description: People Who are already registered
      responses:
        400:
           description: User Error
           schema: 
             type: string
             example: "Some Error "
        200:    # status code
          description: Successul Response
          schema: 
            type: array
            items: 
              type: object
              properties:
              id:
                type: integer
              username:
                type: string
              first_name:
                type: string
              last_name: 
                type: string
              email:
                type: string
              phone:
                type:integer
              password:
                type:string
              tokens:
                token:
                 type:string
              role:
                type:string

#Get Request with username
  /username/{username}:
    get:
      summary: Returns a user by username.
      description: Returns the Specific User
      parameters:
        - username: username
          in: path
          required: true
          schema:
            type : string
            format: string
      responses: 
        '200':
          description: OK
          schema:
            type: object
            example: {username: bbbbbbb}

#Post json/body & Body required
  # /create:
  #   post:
  #     summary: Adds a new user
  #     produces:
  #       - application/json
  #     consumes:
  #       - application/json
  #     parameters:
  #       - in: body
  #         name: body
  #         schema:
  #           type: object
  #           required:
  #             - name
  #             - id
  #           properties:
  #             id:
  #               type: integer
  #             name:
  #               type: string
  #     responses:
  #       '200':
  #         description: OK


#Defining Body Reference
  /create:
    post:
      summary: Adds a new user
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          schema:
           $ref: "#/models/users.model.js"
      responses:
        '200':
          description: OK



#In Headers
  /string:
    get:
      summary: Checks if the server is alive
      parameters:
        - in: header
          name: Request-username
          schema:
            type: string
          required: true
      responses:
        200:
          description: Successful Response
        400:
          description: User Error
        500:
          description: Internal Server Error



components:
  schemas:
    User:
      type: object
      required:
        - name
        - id
      properties:
        id:
          type: integer
        name:
          type: string